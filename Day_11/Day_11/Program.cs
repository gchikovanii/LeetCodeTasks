#region Task1

//Given a string s, reverse only all the vowels in the string and return it.

//The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.



//Example 1:

//Input: s = "hello"
//Output: "holle"
//Example 2:

//Input: s = "leetcode"
//Output: "leotcede"

//using System.Text;

//string ReverseVowels(string s)
//{
//    StringBuilder sb = new StringBuilder();
//    var stack = new Stack<char>();
//    string toCheck = "aeiouAEIOU";
//    foreach (char c in s)
//    {
//        if(toCheck.Contains(c))
//            stack.Push(c);  
//    }
//    foreach (char c in s)
//    {
//        if(toCheck.Contains(c))
//            sb.Append(stack.Pop());
//        else
//            sb.Append(c);
//    }
//    return sb.ToString();
//}
//Console.WriteLine(ReverseVowels("hello"));
//Console.WriteLine(ReverseVowels("leetcode"));
//Console.WriteLine(ReverseVowels("aA"));










#endregion

#region Task2

//ou are given two strings s and t.

//String t is generated by random shuffling string s and then add one more letter at a random position.

//Return the letter that was added to t.



//Example 1:

//Input: s = "abcd", t = "abcde"
//Output: "e"
//Explanation: 'e' is the letter that was added.
//Example 2:

//Input: s = "", t = "y"
//Output: "y"

//char FindTheDifference(string s, string t)
//{
//    //if (t.StartsWith(s))
//    //{
//    //    string lastChar = t.Substring(s.Length);
//    //    if (lastChar.Length != 0)
//    //        return Char.Parse(lastChar);
//    //}
//    //return ' ';

//    //Solution2
//    foreach (char c in s)
//    {
//        t = t.Remove(t.IndexOf(c), 1);
//    }
//    return t[0];
//}
//Console.WriteLine(FindTheDifference("abcd","abcde"));
//Console.WriteLine(FindTheDifference("", "y"));








#endregion

#region Task3


//Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

//A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).



//Example 1:

//Input: s = "abc", t = "ahbgdc"
//Output: true
//Example 2:

//Input: s = "axc", t = "ahbgdc"
//Output: false

//bool IsSubsequence(string s, string t)
//{
//    int index = -1, count = 0;
//    for (int i = 0; i < s.Length; i++)
//    {
//        for (int j = index + 1; j < t.Length; j++)
//        {
//            if (t[j] == s[i])
//            {
//                count++;
//                index = j;
//                break;
//            }
//        }
//    }
//    return count == s.Length;
//}
//Console.WriteLine(IsSubsequence("abc", "ahbgdc"));
//Console.WriteLine(IsSubsequence("axc", "ahbgdc"));

#endregion